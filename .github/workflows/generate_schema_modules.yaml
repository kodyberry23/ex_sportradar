name: Sportradar Schema Sync

on:
  workflow_dispatch:
    inputs:
      sports_endpoints:
        description: 'JSON object mapping sports to their API endpoints'
        required: true
        type: string
        default: |
                 {
                   "basketball": "https://api-docs.sportradar.us/nba/NBA_v8_schema.zip",
                   "football": "https://api-docs.sportradar.us/NFL/NFL_v7.zip",
                   "baseball": "https://api-docs.sportradar.us/mlb/MLB_v7_Schema.zip"
                 }

jobs:
  convert_schemas:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install SWI-Prolog
        run: |
            sudo apt-get update
            sudo apt-get install -y swi-prolog
  
      - name: Install xsd2json
        run: npm install -g xsd2json@latest

      - name: Process Schemas
        run: |
          # Create schemas directory in the repository
          mkdir -p priv/schemas
          
          echo '${{ inputs.sports_endpoints }}' | jq -r 'to_entries | .[] | @text "\(.key) \(.value)"' | while read -r sport endpoint; do
            # Extract league and version from URL
            league=$(echo "$endpoint" | grep -o '[A-Z]\{3\}' | head -1 | tr '[:upper:]' '[:lower:]')
            version=$(echo "$endpoint" | grep -o 'v[0-9]\+' | tr '[:upper:]' '[:lower:]')
            
            echo "Processing $sport/$league $version from $endpoint"
            
            # Create directories
            mkdir -p temp/{xsd,json}/$sport/$league/$version
            mkdir -p priv/schemas/$sport/$league/$version
            
            # Download and extract schema
            curl -L "$endpoint" -o "temp/$sport-$league-schema.zip"
            unzip -o "temp/$sport-$league-schema.zip" -d "temp/xsd/$sport/$league/$version"
            
            # Clean up MacOS files
            find temp/xsd/$sport/$league -name "._*" -delete
            find temp/xsd/$sport/$league -name ".DS_Store" -delete
            find temp/xsd/$sport/$league -name "__MACOSX" -type d -exec rm -r {} +
            
            # Convert XSD files to JSON Schema while preserving directory structure
            find "temp/xsd/$sport/$league/$version" -name "*.xsd" -type f | while read -r xsd_file; do
              # Get relative path from the version directory
              rel_path=$(realpath --relative-to="temp/xsd/$sport/$league/$version" "$(dirname "$xsd_file")")
              base_name=$(basename "$xsd_file" .xsd)
              
              if [ "$rel_path" = "." ]; then
                output_file="priv/schemas/$sport/$league/$version/${base_name}.json"
                mkdir -p "$(dirname "$output_file")"
              else
                output_file="priv/schemas/$sport/$league/$version/$rel_path/${base_name}.json"
                mkdir -p "$(dirname "$output_file")"
              fi
              
              echo "Converting $xsd_file to $output_file"
              
              # Run conversion in the original directory to preserve relative paths
              (cd "$(dirname "$xsd_file")" && xsd2json "$(basename "$xsd_file")" > "$output_file")
            done
          done
          
          # Clean up temporary files
          rm -rf temp

      - name: Commit and push schema files
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add priv/schemas
          
          if ! git diff --staged --quiet; then
            git commit -m "chore: update Sportradar JSON schemas"
            git push origin main
          else
            echo "No changes to commit"
          fi

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
            otp-version: '25.0'
            elixir-version: '1.14.0'
  
      - name: Generate Elixir Modules
        run: |
          # For each sport/league combination in the schemas
          for sport_dir in priv/schemas/*/; do
            sport=$(basename "$sport_dir")
            
            for league_dir in "$sport_dir"/*/; do
              league=$(basename "$league_dir")
              
              for version_dir in "$league_dir"/*/; do
                version=$(basename "$version_dir")
                
                echo "Generating schemas for $sport/$league/$version"
                mix sportradar.gen.schemas \
                  --sport "$sport" \
                  --league "$league" \
                  --version "$version"
              done
            done
          done
  
      - name: Commit generated Elixir modules
        run: |
          git add lib/sportradar/sports
          
          if ! git diff --staged --quiet; then
            git commit -m "chore: update generated Sportradar modules"
            git push origin main
          else
            echo "No changes to generated modules"
          fi