name: Sportradar Proto Sync

on:
  workflow_dispatch:
    inputs:
      sports_endpoints:
        description: 'JSON object mapping sports to their API endpoints (e.g., {"football": "https://api-docs.sportradar.us/NFL/NFL_v7.zip", "baseball": "https://api-docs.sportradar.us/mlb/MLB_v7_Schema.zip"})'
        required: true
        type: string
        default: |
                 {
                   "basketball": "https://api-docs.sportradar.us/nba/NBA_v8_schema.zip",
                   "football": "https://api-docs.sportradar.us/NFL/NFL_v7.zip",
                   "baseball": "https://api-docs.sportradar.us/mlb/MLB_v7_Schema.zip"
                 }

env:
  SCHEMA2PROTO_VERSION: 1.1.0
  PROTOC_VERSION: 3.21.1
  PROTOC_GEN_ELIXIR_VERSION: 0.11.0

jobs:
  sync_protos:
    runs-on: ubuntu-latest
    steps:
      - name: Process Sportradar Endpoints
        run: |
             # Create working directories
             mkdir -p temp/{xsd,proto,elixir}
             
             # Function to extract league and version from URL
             extract_league_version() {
               local url="$1"
               # Extract league (e.g., NFL, NBA, MLB)
               local league=$(echo "$url" | grep -o '[A-Z]\{3\}' | head -1 | tr '[:upper:]' '[:lower:]')
               # Extract version (e.g., v7, v8)
               local version=$(echo "$url" | grep -o 'v[0-9]\+' | tr '[:upper:]' '[:lower:]')
               echo "$league $version"
             }
             
             # Parse endpoints from input JSON and process each sport
             echo '${{ inputs.sports_endpoints }}' | jq -r 'to_entries | .[] | @text "\(.key) \(.value)"' | while read -r sport endpoint; do
               # Extract league and version from the endpoint URL
               read -r league version <<< $(extract_league_version "$endpoint")
               
               echo "Processing $sport/$league $version from $endpoint"
               
               # Create sport-specific directories
               mkdir -p temp/xsd/$sport/$league temp/proto/$sport/$league temp/elixir/$sport/$league
               
               # Download and unzip the schema
               ZIP_FILE="temp/$sport-$league-schema.zip"
               curl -L "$endpoint" -o "$ZIP_FILE"
               unzip -o "$ZIP_FILE" -d "temp/xsd/$sport/$league"
               rm "$ZIP_FILE"
               
               # Convert XSD to Proto
               find "temp/xsd/$sport/$league" -name "*.xsd" -type f | while read -r xsd_file; do
                 # Generate a filename-safe output path
                 PROTO_FILE="temp/proto/$sport/$league/$(basename "$xsd_file" .xsd).proto"
                 
                 echo "Converting $xsd_file to $PROTO_FILE"
                 
                 java -jar tools/schema2proto.jar \
                   --input="$xsd_file" \
                   --output="$PROTO_FILE" \
                   --package="sportradar.sports.$sport.$league.$version" \
                   --java_package="com.sportradar.sports.$sport.$league.$version" \
                   --proto_path="temp/proto/$sport/$league"
                 
                 # Generate Elixir code if proto file was created successfully
                 if [ -f "$PROTO_FILE" ]; then
                   echo "Generating Elixir code for $PROTO_FILE"
                   
                   # Create output directory structure
                   mkdir -p "lib/sportradar/sports/$sport/$league/$version"
                   
                   protoc \
                     --elixir_out="lib/sportradar/sports/$sport/$league/$version" \
                     --proto_path="temp/proto/$sport/$league" \
                     "$PROTO_FILE"
                 fi
               done
             done

      - name: Clean up temporary files
        run: |
          rm -rf temp
  
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Stage all changes in the lib directory
          git add lib/sportradar
          
          # Only commit and push if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update Sportradar proto definitions"
            git push origin main
          fi