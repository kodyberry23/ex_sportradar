name: Sportradar Proto Sync

on:
  workflow_dispatch:
    inputs:
      sports_endpoints:
        description: 'JSON object mapping sports to their API endpoints (e.g., {"football": "https://api-docs.sportradar.us/NFL/NFL_v7.zip", "baseball": "https://api-docs.sportradar.us/mlb/MLB_v7_Schema.zip"})'
        required: true
        type: string
        default: |
                 {
                   "basketball": "https://api-docs.sportradar.us/nba/NBA_v8_schema.zip",
                   "football": "https://api-docs.sportradar.us/NFL/NFL_v7.zip",
                   "baseball": "https://api-docs.sportradar.us/mlb/MLB_v7_Schema.zip"
                 }

env:
  SCHEMA2PROTO_VERSION: 1.97
  PROTOC_VERSION: 29.3
  PROTOC_GEN_ELIXIR_VERSION: 0.11.0

jobs:
  sync_protos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: '25.0'
          elixir-version: '1.14.0'

      - name: Install Protoc
        run: |
          PROTOC_ZIP=protoc-${PROTOC_VERSION}-linux-x86_64.zip
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/$PROTOC_ZIP
          sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
          sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
          rm -f $PROTOC_ZIP
          protoc --version

      - name: Install protoc-gen-elixir
        run: |
          mix escript.install hex protobuf ${PROTOC_GEN_ELIXIR_VERSION} --force
          echo "$HOME/.mix/escripts" >> $GITHUB_PATH

      - name: Download and setup schema2proto
        run: |
            # Create a directory to store our tools
            mkdir -p tools
            
            # We're using Maven Central's repository to download the schema2proto library
            # Maven Central is the primary repository for Java dependencies
            MAVEN_URL="https://repo1.maven.org/maven2"
            
            # The full path to our specific version of schema2proto-lib
            SCHEMA2PROTO_PATH="no/entur/schema2proto-lib/1.97/schema2proto-lib-1.97.jar"
            
            echo "Downloading schema2proto-lib version 1.97 from Maven Central"
            
            # Download with retry logic in case of temporary network issues
            for i in {1..3}; do
              if curl -L --fail "$MAVEN_URL/$SCHEMA2PROTO_PATH" -o "tools/schema2proto.jar"; then
                echo "Download successful!"
                break
              else
                echo "Attempt $i failed. Retrying after 5 seconds..."
                sleep 5
              fi
            done
            
            # Verify our download was successful
            if [ ! -f tools/schema2proto.jar ] || [ ! -s tools/schema2proto.jar ]; then
              echo "Error: Failed to download schema2proto-lib"
              exit 1
            fi
            
            echo "schema2proto-lib has been downloaded and verified"
            ls -l tools/schema2proto.jar

      - name: Process Sportradar Endpoints
        run: |
              # Create working directories
              mkdir -p temp/{xsd,proto,elixir}
              
              # Function to extract league and version from URL
              extract_league_version() {
                local url="$1"
                local league=$(echo "$url" | grep -o '[A-Z]\{3\}' | head -1 | tr '[:upper:]' '[:lower:]')
                local version=$(echo "$url" | grep -o 'v[0-9]\+' | tr '[:upper:]' '[:lower:]')
                echo "$league $version"
              }
              
              process_xsd_file() {
                local xsd_file="$1"
                local output_dir="$2"
                local package_base="$3"
                local java_package_base="$4"
                
                # Extract version from filename (e.g., v2.0, v4.0, v8.0)
                local file_version=$(basename "$xsd_file" | grep -o 'v[0-9]\+\.[0-9]\+' || echo "")
                if [ -n "$file_version" ]; then
                  # Create version-specific subdirectory
                  local version_dir="$output_dir/$file_version"
                  mkdir -p "$version_dir"
                  
                  echo "Processing file: $xsd_file (version: $file_version)"
                  java -jar tools/schema2proto.jar \
                    --outputDirectory="$version_dir" \
                    --outputFilename="$(basename "$xsd_file" .xsd).proto" \
                    --defaultProtoPackage="$package_base.$file_version" \
                    --options="java_package:$java_package_base.$file_version" \
                    --includeMessageDocs=true \
                    --includeFieldDocs=true \
                    --inheritanceToComposition=true \
                    --skipEmptyTypeInheritance=true \
                    --customImportLocations="$(dirname "$xsd_file")" \
                    --derivationBySubsumption=true \
                    "$xsd_file"
                else
                  echo "Warning: No version found in filename: $xsd_file"
                fi
              }
              
              process_xsd_directory() {
                local base_dir="$1"
                local proto_base_dir="$2"
                local sport="$3"
                local league="$4"
                local main_version="$5"
                local relative_path="${6:-}"
                
                local current_dir="${base_dir}${relative_path:+/$relative_path}"
                local package_suffix="${relative_path:+.${relative_path,,}}"
                
                echo "Processing directory: $current_dir"
                
                # Create proto output directory for this path
                local proto_dir="$proto_base_dir${relative_path:+/$relative_path}"
                mkdir -p "$proto_dir"
                
                # First process common files
                find "$current_dir" -maxdepth 1 -name "common*.xsd" -type f | sort | while read -r xsd_file; do
                  process_xsd_file "$xsd_file" \
                    "$proto_dir" \
                    "sportradar.sports.$sport.$league.common${package_suffix}" \
                    "com.sportradar.sports.$sport.$league.common${package_suffix}"
                done
                
                # Then process non-common files
                find "$current_dir" -maxdepth 1 -name "*.xsd" ! -name "common*.xsd" -type f | sort | while read -r xsd_file; do
                  process_xsd_file "$xsd_file" \
                    "$proto_dir" \
                    "sportradar.sports.$sport.$league.$main_version${package_suffix}" \
                    "com.sportradar.sports.$sport.$league.$main_version${package_suffix}"
                done
                
                # Process subdirectories
                find "$current_dir" -mindepth 1 -maxdepth 1 -type d ! -name ".*" | while read -r subdir; do
                  local subdir_name=$(basename "$subdir")
                  local new_relative_path="${relative_path:+$relative_path/}$subdir_name"
                  process_xsd_directory "$base_dir" "$proto_base_dir" "$sport" "$league" "$main_version" "$new_relative_path"
                done
              }
              
              # Parse endpoints from input JSON and process each sport
              echo '${{ inputs.sports_endpoints }}' | jq -r 'to_entries | .[] | @text "\(.key) \(.value)"' | while read -r sport endpoint; do
                # Extract league and version from the endpoint URL
                read -r league version <<< $(extract_league_version "$endpoint")
                
                echo "Processing $sport/$league $version from $endpoint"
                
                # Create sport-specific directories
                mkdir -p temp/xsd/$sport/$league temp/proto/$sport/$league temp/elixir/$sport/$league
                
                # Download and unzip the schema
                ZIP_FILE="temp/$sport-$league-schema.zip"
                curl -L "$endpoint" -o "$ZIP_FILE"
                unzip -o "$ZIP_FILE" -d "temp/xsd/$sport/$league"
                rm "$ZIP_FILE"
    
                # Remove MacOS system files
                find temp/xsd/$sport/$league -name "._*" -delete
                find temp/xsd/$sport/$league -name ".DS_Store" -delete
                find temp/xsd/$sport/$league -name "__MACOSX" -type d -exec rm -r {} +
                
                # Process all XSD files recursively
                xsd_dir="temp/xsd/$sport/$league"
                proto_dir="temp/proto/$sport/$league"
                process_xsd_directory "$xsd_dir" "$proto_dir" "$sport" "$league" "$version"
                
                # Generate Elixir code from all proto files
                echo "Generating Elixir code..."
                find "$proto_dir" -name "*.proto" -type f | while read -r proto_file; do
                  # Extract version directory from proto file path
                  local proto_rel_path=${proto_file#$proto_dir/}
                  local version_part=$(echo "$proto_rel_path" | grep -o 'v[0-9]\+\.[0-9]\+' || echo "$version")
                  local remaining_path=$(dirname "$proto_rel_path" | sed "s|$version_part||")
                  
                  echo "Generating Elixir code for $proto_file (version: $version_part)"
                  
                  # Create the appropriate output directory
                  mkdir -p "lib/sportradar/sports/$sport/$league/$version_part${remaining_path}"
                  
                  protoc \
                    --elixir_out="lib/sportradar/sports/$sport/$league/$version_part${remaining_path}" \
                    --proto_path="$(dirname "$proto_file")" \
                    --proto_path="$proto_dir" \
                    "$proto_file"
                done
              done

      - name: Clean up temporary files
        run: |
          rm -rf temp
  
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add lib/sportradar
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update Sportradar proto definitions"
            git push origin main
          fi